// !?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!
// !?!?!? WARNING CONTRIBUTOR ?!?!?!
// !?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!
// this file is generated by tools/std_math_gen.c
// please edit that file and regenerate this one if you want to make edits

#ifndef _HCC_STD_MATH_TYPES_H_
#define _HCC_STD_MATH_TYPES_H_
// ===========================================
//
//
// Libc Math extensions
//
//
// ===========================================

#define INFINITYF INFINITY
#define INFINITYD INFINITY
#define NEGINFINITYF (-INFINITY)
#define NEGINFINITYD (-INFINITY)
#define NANF NAN
#define NAND NAN

// ===========================================
//
//
// Half type aka. float 16 bit
//
//
// ===========================================

typedef struct half { uint16_t _bits; } half;
#define ZEROH ((half){ _bits = 0; })
#define INFINITYH ((half){ _bits = 0x7c00; })
#define NEGINFINITYH ((half){ _bits = 0xfc00; })
#define NANH ((half){ _bits = 0xffff; })

// ===========================================
//
//
// Packed Vector
//
//
// ===========================================
//
// these packed vectors have alignment of their component type.
// they should only be used to transport vectors between CPU and GPU if the native alignment adds too much padding
//

typedef struct pvec2bool { bool     x; bool     y; } pvec2bool;
typedef struct pvec2h    { half     x; half     y; } pvec2h;
typedef struct pvec2f    { float    x; float    y; } pvec2f;
typedef struct pvec2d    { double   x; double   y; } pvec2d;
typedef struct pvec2i8   { int8_t   x; int8_t   y; } pvec2i8;
typedef struct pvec2i16  { int16_t  x; int16_t  y; } pvec2i16;
typedef struct pvec2i32  { int32_t  x; int32_t  y; } pvec2i32;
typedef struct pvec2i64  { int64_t  x; int64_t  y; } pvec2i64;
typedef struct pvec2u8   { uint8_t  x; uint8_t  y; } pvec2u8;
typedef struct pvec2u16  { uint16_t x; uint16_t y; } pvec2u16;
typedef struct pvec2u32  { uint32_t x; uint32_t y; } pvec2u32;
typedef struct pvec2u64  { uint64_t x; uint64_t y; } pvec2u64;

typedef struct pvec3bool { bool     x; bool     y; bool     z; } pvec3bool;
typedef struct pvec3h    { half     x; half     y; half     z; } pvec3h;
typedef struct pvec3f    { float    x; float    y; float    z; } pvec3f;
typedef struct pvec3d    { double   x; double   y; double   z; } pvec3d;
typedef struct pvec3i8   { int8_t   x; int8_t   y; int8_t   z; } pvec3i8;
typedef struct pvec3i16  { int16_t  x; int16_t  y; int16_t  z; } pvec3i16;
typedef struct pvec3i32  { int32_t  x; int32_t  y; int32_t  z; } pvec3i32;
typedef struct pvec3i64  { int64_t  x; int64_t  y; int64_t  z; } pvec3i64;
typedef struct pvec3u8   { uint8_t  x; uint8_t  y; uint8_t  z; } pvec3u8;
typedef struct pvec3u16  { uint16_t x; uint16_t y; uint16_t z; } pvec3u16;
typedef struct pvec3u32  { uint32_t x; uint32_t y; uint32_t z; } pvec3u32;
typedef struct pvec3u64  { uint64_t x; uint64_t y; uint64_t z; } pvec3u64;

typedef struct pvec4bool { bool     x; bool     y; bool     z; bool     w; } pvec4bool;
typedef struct pvec4h    { half     x; half     y; half     z; half     w; } pvec4h;
typedef struct pvec4f    { float    x; float    y; float    z; float    w; } pvec4f;
typedef struct pvec4d    { double   x; double   y; double   z; double   w; } pvec4d;
typedef struct pvec4i8   { int8_t   x; int8_t   y; int8_t   z; int8_t   w; } pvec4i8;
typedef struct pvec4i16  { int16_t  x; int16_t  y; int16_t  z; int16_t  w; } pvec4i16;
typedef struct pvec4i32  { int32_t  x; int32_t  y; int32_t  z; int32_t  w; } pvec4i32;
typedef struct pvec4i64  { int64_t  x; int64_t  y; int64_t  z; int64_t  w; } pvec4i64;
typedef struct pvec4u8   { uint8_t  x; uint8_t  y; uint8_t  z; uint8_t  w; } pvec4u8;
typedef struct pvec4u16  { uint16_t x; uint16_t y; uint16_t z; uint16_t w; } pvec4u16;
typedef struct pvec4u32  { uint32_t x; uint32_t y; uint32_t z; uint32_t w; } pvec4u32;
typedef struct pvec4u64  { uint64_t x; uint64_t y; uint64_t z; uint64_t w; } pvec4u64;

//
// initializes a new _packed_ vector with 2, 3 or 4 components of any of the following types:
//	bool, half, float, double, uint8_t, uint16_t, uint32_t, uint64_t, int8_t, int16_t, int32_t, or int64_t
#define pv2h   (x, y)       ((pvec2h   ){ { x, y } })
#define pv2f   (x, y)       ((pvec2f   ){ { x, y } })
#define pv2d   (x, y)       ((pvec2d   ){ { x, y } })
#define pv2i8  (x, y)       ((pvec2i8  ){ { x, y } })
#define pv2i16 (x, y)       ((pvec2i16 ){ { x, y } })
#define pv2i32 (x, y)       ((pvec2i32 ){ { x, y } })
#define pv2i64 (x, y)       ((pvec2i64 ){ { x, y } })
#define pv2u8  (x, y)       ((pvec2u8  ){ { x, y } })
#define pv2u16 (x, y)       ((pvec2u16 ){ { x, y } })
#define pv2u32 (x, y)       ((pvec2u32 ){ { x, y } })
#define pv2u64 (x, y)       ((pvec2u64 ){ { x, y } })
#define pv3h   (x, y, z)    ((pvec3h   ){ { x, y, z } })
#define pv3f   (x, y, z)    ((pvec3f   ){ { x, y, z } })
#define pv3d   (x, y, z)    ((pvec3d   ){ { x, y, z } })
#define pv3i8  (x, y, z)    ((pvec3i8  ){ { x, y, z } })
#define pv3i16 (x, y, z)    ((pvec3i16 ){ { x, y, z } })
#define pv3i32 (x, y, z)    ((pvec3i32 ){ { x, y, z } })
#define pv3i64 (x, y, z)    ((pvec3i64 ){ { x, y, z } })
#define pv3u8  (x, y, z)    ((pvec3u8  ){ { x, y, z } })
#define pv3u16 (x, y, z)    ((pvec3u16 ){ { x, y, z } })
#define pv3u32 (x, y, z)    ((pvec3u32 ){ { x, y, z } })
#define pv3u64 (x, y, z)    ((pvec3u64 ){ { x, y, z } })
#define pv4h   (x, y, z, w) ((pvec4h   ){ { x, y, z, w } })
#define pv4f   (x, y, z, w) ((pvec4f   ){ { x, y, z, w } })
#define pv4d   (x, y, z, w) ((pvec4d   ){ { x, y, z, w } })
#define pv4i8  (x, y, z, w) ((pvec4i8  ){ { x, y, z, w } })
#define pv4i16 (x, y, z, w) ((pvec4i16 ){ { x, y, z, w } })
#define pv4i32 (x, y, z, w) ((pvec4i32 ){ { x, y, z, w } })
#define pv4i64 (x, y, z, w) ((pvec4i64 ){ { x, y, z, w } })
#define pv4u8  (x, y, z, w) ((pvec4u8  ){ { x, y, z, w } })
#define pv4u16 (x, y, z, w) ((pvec4u16 ){ { x, y, z, w } })
#define pv4u32 (x, y, z, w) ((pvec4u32 ){ { x, y, z, w } })
#define pv4u64 (x, y, z, w) ((pvec4u64 ){ { x, y, z, w } })

// ===========================================
//
//
// Vector
//
//
// ===========================================
//
// these vectors have native alignment where their alignment is the same as their size
// these vectors should be used when performing maths operations
// the vec3 is rounded up to the size and align of a vec4 due to hardware limitations
//

typedef union vec2bool vec2bool;
typedef union vec2h    vec2h;
typedef union vec2f    vec2f;
typedef union vec2d    vec2d;
typedef union vec2i8   vec2i8;
typedef union vec2i16  vec2i16;
typedef union vec2i32  vec2i32;
typedef union vec2i64  vec2i64;
typedef union vec2u8   vec2u8;
typedef union vec2u16  vec2u16;
typedef union vec2u32  vec2u32;
typedef union vec2u64  vec2u64;

typedef union vec3bool vec3bool;
typedef union vec3h    vec3h;
typedef union vec3f    vec3f;
typedef union vec3d    vec3d;
typedef union vec3i8   vec3i8;
typedef union vec3i16  vec3i16;
typedef union vec3i32  vec3i32;
typedef union vec3i64  vec3i64;
typedef union vec3u8   vec3u8;
typedef union vec3u16  vec3u16;
typedef union vec3u32  vec3u32;
typedef union vec3u64  vec3u64;

typedef union vec4bool vec4bool;
typedef union vec4h    vec4h;
typedef union vec4f    vec4f;
typedef union vec4d    vec4d;
typedef union vec4i8   vec4i8;
typedef union vec4i16  vec4i16;
typedef union vec4i32  vec4i32;
typedef union vec4i64  vec4i64;
typedef union vec4u8   vec4u8;
typedef union vec4u16  vec4u16;
typedef union vec4u32  vec4u32;
typedef union vec4u64  vec4u64;

HCC_INTRINSIC union vec2bool {
	_Alignas(2)
	struct { bool x; bool y; };
	struct { bool r; bool g; };
	struct { bool width; bool height; };
	bool array[2];
};

HCC_INTRINSIC union vec2h {
	_Alignas(4)
	struct { half x; half y; };
	struct { half r; half g; };
	struct { half width; half height; };
	half array[2];
};

HCC_INTRINSIC union vec2f {
	_Alignas(8)
	struct { float x; float y; };
	struct { float r; float g; };
	struct { float width; float height; };
	float array[2];
};

HCC_INTRINSIC union vec2d {
	_Alignas(16)
	struct { double x; double y; };
	struct { double r; double g; };
	struct { double width; double height; };
	double array[2];
};

HCC_INTRINSIC union vec2i8 {
	_Alignas(2)
	struct { int8_t x; int8_t y; };
	struct { int8_t r; int8_t g; };
	struct { int8_t width; int8_t height; };
	int8_t array[2];
};

HCC_INTRINSIC union vec2i16 {
	_Alignas(4)
	struct { int16_t x; int16_t y; };
	struct { int16_t r; int16_t g; };
	struct { int16_t width; int16_t height; };
	int16_t array[2];
};

HCC_INTRINSIC union vec2i32 {
	_Alignas(8)
	struct { int32_t x; int32_t y; };
	struct { int32_t r; int32_t g; };
	struct { int32_t width; int32_t height; };
	int32_t array[2];
};

HCC_INTRINSIC union vec2i64 {
	_Alignas(16)
	struct { int64_t x; int64_t y; };
	struct { int64_t r; int64_t g; };
	struct { int64_t width; int64_t height; };
	int64_t array[2];
};

HCC_INTRINSIC union vec2u8 {
	_Alignas(2)
	struct { uint8_t x; uint8_t y; };
	struct { uint8_t r; uint8_t g; };
	struct { uint8_t width; uint8_t height; };
	uint8_t array[2];
};

HCC_INTRINSIC union vec2u16 {
	_Alignas(4)
	struct { uint16_t x; uint16_t y; };
	struct { uint16_t r; uint16_t g; };
	struct { uint16_t width; uint16_t height; };
	uint16_t array[2];
};

HCC_INTRINSIC union vec2u32 {
	_Alignas(8)
	struct { uint32_t x; uint32_t y; };
	struct { uint32_t r; uint32_t g; };
	struct { uint32_t width; uint32_t height; };
	uint32_t array[2];
};

HCC_INTRINSIC union vec2u64 {
	_Alignas(16)
	struct { uint64_t x; uint64_t y; };
	struct { uint64_t r; uint64_t g; };
	struct { uint64_t width; uint64_t height; };
	uint64_t array[2];
};

HCC_INTRINSIC union vec3bool {
	_Alignas(4)
	struct { bool x; bool y; bool z; bool _w; };
	struct { bool r; bool g; bool b; bool _a; };
	vec2bool xy;
	vec2bool rg;
	bool array[4];
};

HCC_INTRINSIC union vec3h {
	_Alignas(8)
	struct { half x; half y; half z; half _w; };
	struct { half r; half g; half b; half _a; };
	vec2h xy;
	vec2h rg;
	half array[4];
};

HCC_INTRINSIC union vec3f {
	_Alignas(16)
	struct { float x; float y; float z; float _w; };
	struct { float r; float g; float b; float _a; };
	vec2f xy;
	vec2f rg;
	float array[4];
};

HCC_INTRINSIC union vec3d {
	_Alignas(32)
	struct { double x; double y; double z; double _w; };
	struct { double r; double g; double b; double _a; };
	vec2d xy;
	vec2d rg;
	double array[4];
};

HCC_INTRINSIC union vec3i8 {
	_Alignas(4)
	struct { int8_t x; int8_t y; int8_t z; int8_t _w; };
	struct { int8_t r; int8_t g; int8_t b; int8_t _a; };
	vec2i8 xy;
	vec2i8 rg;
	int8_t array[4];
};

HCC_INTRINSIC union vec3i16 {
	_Alignas(8)
	struct { int16_t x; int16_t y; int16_t z; int16_t _w; };
	struct { int16_t r; int16_t g; int16_t b; int16_t _a; };
	vec2i16 xy;
	vec2i16 rg;
	int16_t array[4];
};

HCC_INTRINSIC union vec3i32 {
	_Alignas(16)
	struct { int32_t x; int32_t y; int32_t z; int32_t _w; };
	struct { int32_t r; int32_t g; int32_t b; int32_t _a; };
	vec2i32 xy;
	vec2i32 rg;
	int32_t array[4];
};

HCC_INTRINSIC union vec3i64 {
	_Alignas(32)
	struct { int64_t x; int64_t y; int64_t z; int64_t _w; };
	struct { int64_t r; int64_t g; int64_t b; int64_t _a; };
	vec2i64 xy;
	vec2i64 rg;
	int64_t array[4];
};

HCC_INTRINSIC union vec3u8 {
	_Alignas(4)
	struct { uint8_t x; uint8_t y; uint8_t z; uint8_t _w; };
	struct { uint8_t r; uint8_t g; uint8_t b; uint8_t _a; };
	vec2u8 xy;
	vec2u8 rg;
	uint8_t array[4];
};

HCC_INTRINSIC union vec3u16 {
	_Alignas(8)
	struct { uint16_t x; uint16_t y; uint16_t z; uint16_t _w; };
	struct { uint16_t r; uint16_t g; uint16_t b; uint16_t _a; };
	vec2u16 xy;
	vec2u16 rg;
	uint16_t array[4];
};

HCC_INTRINSIC union vec3u32 {
	_Alignas(16)
	struct { uint32_t x; uint32_t y; uint32_t z; uint32_t _w; };
	struct { uint32_t r; uint32_t g; uint32_t b; uint32_t _a; };
	vec2u32 xy;
	vec2u32 rg;
	uint32_t array[4];
};

HCC_INTRINSIC union vec3u64 {
	_Alignas(32)
	struct { uint64_t x; uint64_t y; uint64_t z; uint64_t _w; };
	struct { uint64_t r; uint64_t g; uint64_t b; uint64_t _a; };
	vec2u64 xy;
	vec2u64 rg;
	uint64_t array[4];
};

HCC_INTRINSIC union vec4bool {
	_Alignas(4)
	struct { bool x; bool y; bool z; bool w; };
	struct { bool r; bool g; bool b; bool a; };
	struct { vec2bool top_left; vec2bool bottom_right; };
	struct { vec2bool bottom_left; vec2bool top_right; };
	struct { vec2bool xy; vec2bool zw; };
	struct { vec2bool rg; vec2bool ba; };
	struct { bool _; bool __; bool width; bool height; };
	vec3bool xyz;
	vec3bool rgb;
	bool array[4];
};
HCC_INTRINSIC union vec4h {
	_Alignas(8)
	struct { half x; half y; half z; half w; };
	struct { half r; half g; half b; half a; };
	struct { vec2h top_left; vec2h bottom_right; };
	struct { vec2h bottom_left; vec2h top_right; };
	struct { vec2h xy; vec2h zw; };
	struct { vec2h rg; vec2h ba; };
	struct { half _; half __; half width; half height; };
	vec3h xyz;
	vec3h rgb;
	half array[4];
};
HCC_INTRINSIC union vec4f {
	_Alignas(16)
	struct { float x; float y; float z; float w; };
	struct { float r; float g; float b; float a; };
	struct { vec2f top_left; vec2f bottom_right; };
	struct { vec2f bottom_left; vec2f top_right; };
	struct { vec2f xy; vec2f zw; };
	struct { vec2f rg; vec2f ba; };
	struct { float _; float __; float width; float height; };
	vec3f xyz;
	vec3f rgb;
	float array[4];
};
HCC_INTRINSIC union vec4d {
	_Alignas(32)
	struct { double x; double y; double z; double w; };
	struct { double r; double g; double b; double a; };
	struct { vec2d top_left; vec2d bottom_right; };
	struct { vec2d bottom_left; vec2d top_right; };
	struct { vec2d xy; vec2d zw; };
	struct { vec2d rg; vec2d ba; };
	struct { double _; double __; double width; double height; };
	vec3d xyz;
	vec3d rgb;
	double array[4];
};
HCC_INTRINSIC union vec4i8 {
	_Alignas(4)
	struct { int8_t x; int8_t y; int8_t z; int8_t w; };
	struct { int8_t r; int8_t g; int8_t b; int8_t a; };
	struct { vec2i8 top_left; vec2i8 bottom_right; };
	struct { vec2i8 bottom_left; vec2i8 top_right; };
	struct { vec2i8 xy; vec2i8 zw; };
	struct { vec2i8 rg; vec2i8 ba; };
	struct { int8_t _; int8_t __; int8_t width; int8_t height; };
	vec3i8 xyz;
	vec3i8 rgb;
	int8_t array[4];
};
HCC_INTRINSIC union vec4i16 {
	_Alignas(8)
	struct { int16_t x; int16_t y; int16_t z; int16_t w; };
	struct { int16_t r; int16_t g; int16_t b; int16_t a; };
	struct { vec2i16 top_left; vec2i16 bottom_right; };
	struct { vec2i16 bottom_left; vec2i16 top_right; };
	struct { vec2i16 xy; vec2i16 zw; };
	struct { vec2i16 rg; vec2i16 ba; };
	struct { int16_t _; int16_t __; int16_t width; int16_t height; };
	vec3i16 xyz;
	vec3i16 rgb;
	int16_t array[4];
};
HCC_INTRINSIC union vec4i32 {
	_Alignas(16)
	struct { int32_t x; int32_t y; int32_t z; int32_t w; };
	struct { int32_t r; int32_t g; int32_t b; int32_t a; };
	struct { vec2i32 top_left; vec2i32 bottom_right; };
	struct { vec2i32 bottom_left; vec2i32 top_right; };
	struct { vec2i32 xy; vec2i32 zw; };
	struct { vec2i32 rg; vec2i32 ba; };
	struct { int32_t _; int32_t __; int32_t width; int32_t height; };
	vec3i32 xyz;
	vec3i32 rgb;
	int32_t array[4];
};
HCC_INTRINSIC union vec4i64 {
	_Alignas(32)
	struct { int64_t x; int64_t y; int64_t z; int64_t w; };
	struct { int64_t r; int64_t g; int64_t b; int64_t a; };
	struct { vec2i64 top_left; vec2i64 bottom_right; };
	struct { vec2i64 bottom_left; vec2i64 top_right; };
	struct { vec2i64 xy; vec2i64 zw; };
	struct { vec2i64 rg; vec2i64 ba; };
	struct { int64_t _; int64_t __; int64_t width; int64_t height; };
	vec3i64 xyz;
	vec3i64 rgb;
	int64_t array[4];
};
HCC_INTRINSIC union vec4u8 {
	_Alignas(4)
	struct { uint8_t x; uint8_t y; uint8_t z; uint8_t w; };
	struct { uint8_t r; uint8_t g; uint8_t b; uint8_t a; };
	struct { vec2u8 top_left; vec2u8 bottom_right; };
	struct { vec2u8 bottom_left; vec2u8 top_right; };
	struct { vec2u8 xy; vec2u8 zw; };
	struct { vec2u8 rg; vec2u8 ba; };
	struct { uint8_t _; uint8_t __; uint8_t width; uint8_t height; };
	vec3u8 xyz;
	vec3u8 rgb;
	uint8_t array[4];
};
HCC_INTRINSIC union vec4u16 {
	_Alignas(8)
	struct { uint16_t x; uint16_t y; uint16_t z; uint16_t w; };
	struct { uint16_t r; uint16_t g; uint16_t b; uint16_t a; };
	struct { vec2u16 top_left; vec2u16 bottom_right; };
	struct { vec2u16 bottom_left; vec2u16 top_right; };
	struct { vec2u16 xy; vec2u16 zw; };
	struct { vec2u16 rg; vec2u16 ba; };
	struct { uint16_t _; uint16_t __; uint16_t width; uint16_t height; };
	vec3u16 xyz;
	vec3u16 rgb;
	uint16_t array[4];
};
HCC_INTRINSIC union vec4u32 {
	_Alignas(16)
	struct { uint32_t x; uint32_t y; uint32_t z; uint32_t w; };
	struct { uint32_t r; uint32_t g; uint32_t b; uint32_t a; };
	struct { vec2u32 top_left; vec2u32 bottom_right; };
	struct { vec2u32 bottom_left; vec2u32 top_right; };
	struct { vec2u32 xy; vec2u32 zw; };
	struct { vec2u32 rg; vec2u32 ba; };
	struct { uint32_t _; uint32_t __; uint32_t width; uint32_t height; };
	vec3u32 xyz;
	vec3u32 rgb;
	uint32_t array[4];
};
HCC_INTRINSIC union vec4u64 {
	_Alignas(32)
	struct { uint64_t x; uint64_t y; uint64_t z; uint64_t w; };
	struct { uint64_t r; uint64_t g; uint64_t b; uint64_t a; };
	struct { vec2u64 top_left; vec2u64 bottom_right; };
	struct { vec2u64 bottom_left; vec2u64 top_right; };
	struct { vec2u64 xy; vec2u64 zw; };
	struct { vec2u64 rg; vec2u64 ba; };
	struct { uint64_t _; uint64_t __; uint64_t width; uint64_t height; };
	vec3u64 xyz;
	vec3u64 rgb;
	uint64_t array[4];
};

//
// initializes a new vector with 2, 3 or 4 components of any of the following types:
//	bool, half, float, double, uint8_t, uint16_t, uint32_t, uint64_t, int8_t, int16_t, int32_t, or int64_t
#define v2h   (x, y)       ((vec2h   ){ { x, y } })
#define v2f   (x, y)       ((vec2f   ){ { x, y } })
#define v2d   (x, y)       ((vec2d   ){ { x, y } })
#define v2i8  (x, y)       ((vec2i8  ){ { x, y } })
#define v2i16 (x, y)       ((vec2i16 ){ { x, y } })
#define v2i32 (x, y)       ((vec2i32 ){ { x, y } })
#define v2i64 (x, y)       ((vec2i64 ){ { x, y } })
#define v2u8  (x, y)       ((vec2u8  ){ { x, y } })
#define v2u16 (x, y)       ((vec2u16 ){ { x, y } })
#define v2u32 (x, y)       ((vec2u32 ){ { x, y } })
#define v2u64 (x, y)       ((vec2u64 ){ { x, y } })
#define v3h   (x, y, z)    ((vec3h   ){ { x, y, z } })
#define v3f   (x, y, z)    ((vec3f   ){ { x, y, z } })
#define v3d   (x, y, z)    ((vec3d   ){ { x, y, z } })
#define v3i8  (x, y, z)    ((vec3i8  ){ { x, y, z } })
#define v3i16 (x, y, z)    ((vec3i16 ){ { x, y, z } })
#define v3i32 (x, y, z)    ((vec3i32 ){ { x, y, z } })
#define v3i64 (x, y, z)    ((vec3i64 ){ { x, y, z } })
#define v3u8  (x, y, z)    ((vec3u8  ){ { x, y, z } })
#define v3u16 (x, y, z)    ((vec3u16 ){ { x, y, z } })
#define v3u32 (x, y, z)    ((vec3u32 ){ { x, y, z } })
#define v3u64 (x, y, z)    ((vec3u64 ){ { x, y, z } })
#define v4h   (x, y, z, w) ((vec4h   ){ { x, y, z, w } })
#define v4f   (x, y, z, w) ((vec4f   ){ { x, y, z, w } })
#define v4d   (x, y, z, w) ((vec4d   ){ { x, y, z, w } })
#define v4i8  (x, y, z, w) ((vec4i8  ){ { x, y, z, w } })
#define v4i16 (x, y, z, w) ((vec4i16 ){ { x, y, z, w } })
#define v4i32 (x, y, z, w) ((vec4i32 ){ { x, y, z, w } })
#define v4i64 (x, y, z, w) ((vec4i64 ){ { x, y, z, w } })
#define v4u8  (x, y, z, w) ((vec4u8  ){ { x, y, z, w } })
#define v4u16 (x, y, z, w) ((vec4u16 ){ { x, y, z, w } })
#define v4u32 (x, y, z, w) ((vec4u32 ){ { x, y, z, w } })
#define v4u64 (x, y, z, w) ((vec4u64 ){ { x, y, z, w } })

#define ZEROV2H    ((vec2h   ){0})
#define ZEROV2F    ((vec2f   ){0})
#define ZEROV2D    ((vec2d   ){0})
#define ZEROV2I8   ((vec2i8  ){0})
#define ZEROV2I16  ((vec2i16 ){0})
#define ZEROV2I32  ((vec2i32 ){0})
#define ZEROV2I64  ((vec2i64 ){0})
#define ZEROV2U8   ((vec2u8  ){0})
#define ZEROV2U16  ((vec2u16 ){0})
#define ZEROV2U32  ((vec2u32 ){0})
#define ZEROV2U64  ((vec2u64 ){0})
#define ZEROV3H    ((vec3h   ){0})
#define ZEROV3F    ((vec3f   ){0})
#define ZEROV3D    ((vec3d   ){0})
#define ZEROV3I8   ((vec3i8  ){0})
#define ZEROV3I16  ((vec3i16 ){0})
#define ZEROV3I32  ((vec3i32 ){0})
#define ZEROV3I64  ((vec3i64 ){0})
#define ZEROV3U8   ((vec3u8  ){0})
#define ZEROV3U16  ((vec3u16 ){0})
#define ZEROV3U32  ((vec3u32 ){0})
#define ZEROV3U64  ((vec3u64 ){0})
#define ZEROV4H    ((vec4h   ){0})
#define ZEROV4F    ((vec4f   ){0})
#define ZEROV4D    ((vec4d   ){0})
#define ZEROV4I8   ((vec4i8  ){0})
#define ZEROV4I16  ((vec4i16 ){0})
#define ZEROV4I32  ((vec4i32 ){0})
#define ZEROV4I64  ((vec4i64 ){0})
#define ZEROV4U8   ((vec4u8  ){0})
#define ZEROV4U16  ((vec4u16 ){0})
#define ZEROV4U32  ((vec4u32 ){0})
#define ZEROV4U64  ((vec4u64 ){0})

#define INFINITYV2H v2h(INFINITYH, INFINITYH)
#define INFINITYV2F v2f(INFINITYF, INFINITYF)
#define INFINITYV2D v2d(INFINITYD, INFINITYD)
#define INFINITYV3H v3h(INFINITYH, INFINITYH, INFINITYH)
#define INFINITYV3F v3f(INFINITYF, INFINITYF, INFINITYF)
#define INFINITYV3D v3d(INFINITYD, INFINITYD, INFINITYD)
#define INFINITYV4H v4h(INFINITYH, INFINITYH, INFINITYH, INFINITYH)
#define INFINITYV4F v4f(INFINITYF, INFINITYF, INFINITYF, INFINITYF)
#define INFINITYV4D v4d(INFINITYD, INFINITYD, INFINITYD, INFINITYD)

#define NEGINFINITYV2H v2h(NEGINFINITYH, NEGINFINITYH)
#define NEGINFINITYV2F v2f(NEGINFINITYF, NEGINFINITYF)
#define NEGINFINITYV2D v2d(NEGINFINITYD, NEGINFINITYD)
#define NEGINFINITYV3H v3h(NEGINFINITYH, NEGINFINITYH, NEGINFINITYH)
#define NEGINFINITYV3F v3f(NEGINFINITYF, NEGINFINITYF, NEGINFINITYF)
#define NEGINFINITYV3D v3d(NEGINFINITYD, NEGINFINITYD, NEGINFINITYD)
#define NEGINFINITYV4H v4h(NEGINFINITYH, NEGINFINITYH, NEGINFINITYH, NEGINFINITYH)
#define NEGINFINITYV4F v4f(NEGINFINITYF, NEGINFINITYF, NEGINFINITYF, NEGINFINITYF)
#define NEGINFINITYV4D v4d(NEGINFINITYD, NEGINFINITYD, NEGINFINITYD, NEGINFINITYD)

#define NANV2H v2h(NANH, NANH)
#define NANV2F v2f(NANF, NANF)
#define NANV2D v2d(NAND, NAND)
#define NANV3H v3h(NANH, NANH, NANH)
#define NANV3F v3f(NANF, NANF, NANF)
#define NANV3D v3d(NAND, NAND, NAND)
#define NANV4H v4h(NANH, NANH, NANH, NANH)
#define NANV4F v4f(NANF, NANF, NANF, NANF)
#define NANV4D v4d(NAND, NAND, NAND, NAND)

// ===========================================
//
//
// Packed Matrix
//
//
// ===========================================

HCC_INTRINSIC typedef union pmat2x2f { float    cols[2][2]; pvec2f vcols[2]; float    scalars[4 ]; } pmat2x2f;
HCC_INTRINSIC typedef union pmat2x2d { double   cols[2][2]; pvec2d vcols[2]; double   scalars[4 ]; } pmat2x2d;
HCC_INTRINSIC typedef union pmat2x3f { float    cols[2][3]; pvec2f vcols[2]; float    scalars[6 ]; } pmat2x3f;
HCC_INTRINSIC typedef union pmat2x3d { double   cols[2][3]; pvec2d vcols[2]; double   scalars[6 ]; } pmat2x3d;
HCC_INTRINSIC typedef union pmat2x4f { float    cols[2][4]; pvec2f vcols[2]; float    scalars[8 ]; } pmat2x4f;
HCC_INTRINSIC typedef union pmat2x4d { double   cols[2][4]; pvec2d vcols[2]; double   scalars[8 ]; } pmat2x4d;
HCC_INTRINSIC typedef union pmat3x2f { float    cols[3][2]; pvec3f vcols[3]; float    scalars[6 ]; } pmat3x2f;
HCC_INTRINSIC typedef union pmat3x2d { double   cols[3][2]; pvec3d vcols[3]; double   scalars[6 ]; } pmat3x2d;
HCC_INTRINSIC typedef union pmat3x3f { float    cols[3][3]; pvec3f vcols[3]; float    scalars[9 ]; } pmat3x3f;
HCC_INTRINSIC typedef union pmat3x3d { double   cols[3][3]; pvec3d vcols[3]; double   scalars[9 ]; } pmat3x3d;
HCC_INTRINSIC typedef union pmat3x4f { float    cols[3][4]; pvec3f vcols[3]; float    scalars[12]; } pmat3x4f;
HCC_INTRINSIC typedef union pmat3x4d { double   cols[3][4]; pvec3d vcols[3]; double   scalars[12]; } pmat3x4d;
HCC_INTRINSIC typedef union pmat4x2f { float    cols[4][2]; pvec4f vcols[4]; float    scalars[8 ]; } pmat4x2f;
HCC_INTRINSIC typedef union pmat4x2d { double   cols[4][2]; pvec4d vcols[4]; double   scalars[8 ]; } pmat4x2d;
HCC_INTRINSIC typedef union pmat4x3f { float    cols[4][3]; pvec4f vcols[4]; float    scalars[12]; } pmat4x3f;
HCC_INTRINSIC typedef union pmat4x3d { double   cols[4][3]; pvec4d vcols[4]; double   scalars[12]; } pmat4x3d;
HCC_INTRINSIC typedef union pmat4x4f { float    cols[4][4]; pvec4f vcols[4]; float    scalars[16]; } pmat4x4f;
HCC_INTRINSIC typedef union pmat4x4d { double   cols[4][4]; pvec4d vcols[4]; double   scalars[16]; } pmat4x4d;

// ===========================================
//
//
// Matrix
//
//
// ===========================================

HCC_INTRINSIC typedef union mat2x2f { float    cols[4][2]; vec4f vcols[2]; float    scalars[8 ]; } mat2x2f;
HCC_INTRINSIC typedef union mat2x2d { double   cols[4][2]; vec4d vcols[2]; double   scalars[8 ]; } mat2x2d;
HCC_INTRINSIC typedef union mat2x3f { float    cols[4][3]; vec4f vcols[3]; float    scalars[12]; } mat2x3f;
HCC_INTRINSIC typedef union mat2x3d { double   cols[4][3]; vec4d vcols[3]; double   scalars[12]; } mat2x3d;
HCC_INTRINSIC typedef union mat2x4f { float    cols[4][4]; vec4f vcols[4]; float    scalars[16]; } mat2x4f;
HCC_INTRINSIC typedef union mat2x4d { double   cols[4][4]; vec4d vcols[4]; double   scalars[16]; } mat2x4d;
HCC_INTRINSIC typedef union mat3x2f { float    cols[4][2]; vec4f vcols[2]; float    scalars[8 ]; } mat3x2f;
HCC_INTRINSIC typedef union mat3x2d { double   cols[4][2]; vec4d vcols[2]; double   scalars[8 ]; } mat3x2d;
HCC_INTRINSIC typedef union mat3x3f { float    cols[4][3]; vec4f vcols[3]; float    scalars[12]; } mat3x3f;
HCC_INTRINSIC typedef union mat3x3d { double   cols[4][3]; vec4d vcols[3]; double   scalars[12]; } mat3x3d;
HCC_INTRINSIC typedef union mat3x4f { float    cols[4][4]; vec4f vcols[4]; float    scalars[16]; } mat3x4f;
HCC_INTRINSIC typedef union mat3x4d { double   cols[4][4]; vec4d vcols[4]; double   scalars[16]; } mat3x4d;
HCC_INTRINSIC typedef union mat4x2f { float    cols[4][2]; vec4f vcols[2]; float    scalars[8 ]; } mat4x2f;
HCC_INTRINSIC typedef union mat4x2d { double   cols[4][2]; vec4d vcols[2]; double   scalars[8 ]; } mat4x2d;
HCC_INTRINSIC typedef union mat4x3f { float    cols[4][3]; vec4f vcols[3]; float    scalars[12]; } mat4x3f;
HCC_INTRINSIC typedef union mat4x3d { double   cols[4][3]; vec4d vcols[3]; double   scalars[12]; } mat4x3d;
HCC_INTRINSIC typedef union mat4x4f { float    cols[4][4]; vec4f vcols[4]; float    scalars[16]; } mat4x4f;
HCC_INTRINSIC typedef union mat4x4d { double   cols[4][4]; vec4d vcols[4]; double   scalars[16]; } mat4x4d;

#define IDENTITYM2X2F ((mat2x2f) { .cols[0][0] = 1.0, .cols[1][1] = 1.0 })
#define IDENTITYM2X2D ((mat2x2d) { .cols[0][0] = 1.0, .cols[1][1] = 1.0 })
#define IDENTITYM2X3F ((mat2x3f) { .cols[0][0] = 1.0, .cols[1][1] = 1.0 })
#define IDENTITYM2X3D ((mat2x3d) { .cols[0][0] = 1.0, .cols[1][1] = 1.0 })
#define IDENTITYM2X4F ((mat2x4f) { .cols[0][0] = 1.0, .cols[1][1] = 1.0 })
#define IDENTITYM2X4D ((mat2x4d) { .cols[0][0] = 1.0, .cols[1][1] = 1.0 })
#define IDENTITYM3X2F ((mat3x2f) { .cols[0][0] = 1.0, .cols[1][1] = 1.0 })
#define IDENTITYM3X2D ((mat3x2d) { .cols[0][0] = 1.0, .cols[1][1] = 1.0 })
#define IDENTITYM3X3F ((mat3x3f) { .cols[0][0] = 1.0, .cols[1][1] = 1.0, .cols[2][2] = 1.0 })
#define IDENTITYM3X3D ((mat3x3d) { .cols[0][0] = 1.0, .cols[1][1] = 1.0, .cols[2][2] = 1.0 })
#define IDENTITYM3X4F ((mat3x4f) { .cols[0][0] = 1.0, .cols[1][1] = 1.0, .cols[2][2] = 1.0 })
#define IDENTITYM3X4D ((mat3x4d) { .cols[0][0] = 1.0, .cols[1][1] = 1.0, .cols[2][2] = 1.0 })
#define IDENTITYM4X2F ((mat4x2f) { .cols[0][0] = 1.0, .cols[1][1] = 1.0 })
#define IDENTITYM4X2D ((mat4x2d) { .cols[0][0] = 1.0, .cols[1][1] = 1.0 })
#define IDENTITYM4X3F ((mat4x3f) { .cols[0][0] = 1.0, .cols[1][1] = 1.0, .cols[2][2] = 1.0 })
#define IDENTITYM4X3D ((mat4x3d) { .cols[0][0] = 1.0, .cols[1][1] = 1.0, .cols[2][2] = 1.0 })
#define IDENTITYM4X4F ((mat4x4f) { .cols[0][0] = 1.0, .cols[1][1] = 1.0, .cols[2][2] = 1.0, .cols[3][3] = 1.0 })
#define IDENTITYM4X4D ((mat4x4d) { .cols[0][0] = 1.0, .cols[1][1] = 1.0, .cols[2][2] = 1.0, .cols[3][3] = 1.0 })

#endif // _HCC_STD_MATH_TYPES_H_
